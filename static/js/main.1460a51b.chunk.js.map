{"version":3,"sources":["component/Task/Task.module.css","store/tasks-reducer.tsx","component/TaskItem/TaskItem.tsx","component/Task/Task.tsx","component/TasksForm.tsx","App.tsx","reportWebVitals.ts","store/store.tsx","index.tsx"],"names":["module","exports","TypeKeys","FilterKeys","initialState","tasks","id","v1","task","isDone","actions","type","ADD_TASK","payload","UPDATE_STATE","taskId","DELETE_TASK","CHANGE_TASK_STATUS","TaskItem","idx","onClickChangeCheckbox","onClickDeleteTask","className","classes","taskStyle","draggableId","index","provided","ref","innerRef","draggableProps","dragHandleProps","itemStyle","checkAndDelete","Checkbox","checked","onChange","e","name","IconButton","onClick","aria-label","margin","Task","props","dispatch","useDispatch","useSelector","state","useState","All","filter","setFilter","FilterTasks","Active","t","Completed","onClickChangeCheckboxHandler","newIsDoneValue","currentTarget","changeFilterHandler","main","inputBlock","TextField","label","variant","value","title","onChangeHandler","input1","Button","size","btnAdd","addTask","error","errorMessage","onDragEnd","result","destination","items","splice","source","reorderedItem","droppableId","droppableProps","map","placeholder","allBtnStyle","TasksForm","setTitle","setError","trim","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","s","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,WAAa,yBAAyB,OAAS,qBAAqB,UAAY,wBAAwB,UAAY,wBAAwB,eAAiB,6BAA6B,YAAc,0BAA0B,UAAY,wBAAwB,OAAS,qBAAqB,aAAe,6B,2CCc1VC,EAOOC,E,yEAPPD,K,oBAAAA,E,0BAAAA,E,wCAAAA,E,6BAAAA,M,cAOOC,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KAOZ,IAAMC,EAA0B,CAC5BC,MACI,CACI,CAACC,GAAIC,eAAMC,KAAM,4FAAuBC,QAAQ,GAChD,CAACH,GAAIC,eAAMC,KAAM,4GAAwBC,QAAQ,GACjD,CAACH,GAAIC,eAAMC,KAAM,kGAAwBC,QAAQ,GACjD,CAACH,GAAIC,eAAMC,KAAM,0HAA4BC,QAAQ,GACrD,CAACH,GAAIC,eAAMC,KAAM,mGAAyBC,QAAQ,GAClD,CAACH,GAAIC,eAAMC,KAAM,2GAAuBC,QAAQ,GAChD,CAACH,GAAIC,eAAMC,KAAM,wIAAgCC,QAAQ,GACzD,CAACH,GAAIC,eAAMC,KAAM,iGAAuBC,QAAQ,GAChD,CAACH,GAAIC,eAAMC,KAAM,0HAA4BC,QAAQ,GACrD,CAACH,GAAIC,eAAMC,KAAM,uGAAwBC,QAAQ,KAuChDC,EACE,SAACF,GAAD,MAAmB,CAACG,KAAMT,EAASU,SAAUC,QAAS,CAACL,UADzDE,EAEM,SAACL,GAAD,MAAwB,CAACM,KAAMT,EAASY,aAAcD,QAAS,CAACR,WAFtEK,EAGK,SAACK,GAAD,MAAqB,CAACJ,KAAMT,EAASc,YAAaH,QAAS,CAACE,YAHjEL,EAIW,SAACK,EAAgBN,GAAjB,MAAsC,CAACE,KAAMT,EAASe,mBAAoBJ,QAAS,CAACE,SAAQN,Y,qFCrEvGS,EAAW,SAAC,GAA0F,IAAzFZ,EAAwF,EAAxFA,GAAIE,EAAoF,EAApFA,KAAMW,EAA8E,EAA9EA,IAAKV,EAAyE,EAAzEA,OAAQW,EAAiE,EAAjEA,sBAAuBC,EAA0C,EAA1CA,kBACpE,OACI,qBAAcC,UAAWC,IAAQC,UAAjC,SACI,cAAC,IAAD,CAAoBC,YAAanB,EAAIoB,MAAOP,EAA5C,SACK,SAACQ,GAAD,OACG,0DACIC,IAAKD,EAASE,UAAcF,EAASG,gBAAoBH,EAASI,iBADtE,IACuFT,UAAWC,IAAQS,UAD1G,UAEI,4BAAIxB,IACJ,sBAAKc,UAAWC,IAAQU,eAAxB,UACI,cAACC,EAAA,EAAD,CAAUC,QAAS1B,IAAU,EACnB2B,SAAU,SAACC,GAAD,OAAOjB,EAAsBd,EAAI+B,IAC3CC,KAAK,aAEf,cAACC,EAAA,EAAD,CAAYC,QAASnB,EACToB,aAAW,SACXnB,UAAWC,IAAQmB,OAF/B,SAGI,cAAC,IAAD,eAbJpC,IADVA,ICEX,SAASqC,EAAKC,GAEjB,IAAMC,EAAWC,cAEXzC,EAAQ0C,aAA0C,SAAAC,GAAK,OAAIA,EAAM3C,MAAMA,SAJvC,EAUV4C,mBAAqB9C,EAAW+C,KAVtB,mBAU/BC,EAV+B,KAUvBC,EAVuB,KAYhCC,EAAc,SAAChD,GAEjB,OAAI8C,IAAWhD,EAAWmD,OACfjD,EAAM8C,QAAO,SAAAI,GAAC,OAAKA,EAAE9C,UAE5B0C,IAAWhD,EAAWqD,UACfnD,EAAM8C,QAAO,SAAAI,GAAC,OAAIA,EAAE9C,UAExBJ,GAGLoD,EAA+B,SAACnD,EAAY+B,GAC9C,IAAIqB,EAAiBrB,EAAEsB,cAAcxB,QACrCU,EAASnC,EAA2BJ,EAAIoD,KAGtCE,EAAsB,SAACT,GACzBC,EAAUD,IAWd,OACI,sBAAK7B,UAAWC,IAAQsC,KAAxB,UACI,sBAAKvC,UAAWC,IAAQuC,WAAxB,UACI,cAACC,EAAA,EAAD,CAAWzD,GAAG,iBAAiB0D,MAAM,OAAOC,QAAQ,WACzCC,MAAOtB,EAAMuB,MACb/B,SAAUQ,EAAMwB,gBAChB9C,UAAWC,IAAQ8C,SAE9B,cAACC,EAAA,EAAD,CAAQC,KAAK,QAAQN,QAAQ,WAAW3C,UAAWC,IAAQiD,OAAQhC,QAASI,EAAM6B,QAAlF,eACC7B,EAAM8B,OAAS,qBAAKpD,UAAWC,IAAQoD,aAAxB,SAAuC/B,EAAM8B,WAEjE,cAAC,IAAD,CAAiBE,UAnBzB,SAAyBC,GACrB,GAAKA,EAAOC,YAAZ,CACA,IAAMC,EAAK,YAAO1E,GAFgB,EAGV0E,EAAMC,OAAOH,EAAOI,OAAOvD,MAAO,GAAnDwD,EAH2B,oBAIlCH,EAAMC,OAAOH,EAAOC,YAAYpD,MAAO,EAAGwD,GAC1CrC,EAASnC,EAAsBqE,MAc3B,SACI,cAAC,IAAD,CAAWI,YAAa,YAAxB,SACK,SAACxD,GAAD,OACG,+CAASA,EAASyD,gBAAlB,IAAkCxD,IAAKD,EAASE,SAAhD,SACI,gCAEQwB,EAAYhD,GAAOgF,KAAI,SAAC9B,EAAG7B,GACnB,GAAI6B,EAAE/C,KACF,OAAO,cAAC,EAAD,CACUF,GAAIiD,EAAEjD,GACNa,IAAKO,EACLjB,OAAQ8C,EAAE9C,OACVD,KAAM+C,EAAE/C,KACRa,kBAAmB,kBA1DrDf,EA0D6EiD,EAAEjD,QAzDtGuC,EAASnC,EAAqBJ,IADR,IAACA,GA2DkCc,sBAAuBqC,GANlBF,EAAEjD,OAYvCqB,EAAS2D,uBAM9B,sBAAKhE,UAAWC,IAAQgE,YAAxB,UACI,cAACjB,EAAA,EAAD,CAAQ9B,QAAS,kBAAMoB,EAAoBzD,EAAW+C,MAAtD,iBACA,cAACoB,EAAA,EAAD,CAAQ9B,QAAS,kBAAMoB,EAAoBzD,EAAWmD,SAAtD,oBACA,cAACgB,EAAA,EAAD,CAAQ9B,QAAS,kBAAMoB,EAAoBzD,EAAWqD,YAAtD,6BC7FT,SAASgC,IAEZ,IAAM3C,EAAWC,cAFO,EAIEG,mBAAiB,IAJnB,mBAIjBkB,EAJiB,KAIVsB,EAJU,OAMExC,mBAAiB,IANnB,mBAMjByB,EANiB,KAMVgB,EANU,KAsBxB,OACI,cAAC/C,EAAD,CACI8B,QAhBQ,WACS,KAAjBN,EAAMwB,QACN9C,EAASnC,EAAkByD,EAAMwB,SACjCF,EAAS,KAETC,EAAS,sBAYTtB,gBARgB,SAAC/B,GACrBqD,EAAS,IACTD,EAASpD,EAAEsB,cAAcO,QAOrBC,MAAOA,EACPO,MAAOA,ICvBJkB,MANf,WACI,OACI,cAACJ,EAAD,KCQOK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCNRQ,EAAcC,YAAgB,CAChClG,MNyCwB,WAA2D,IAA1D2C,EAAyD,uDAAtC5C,EAAcoG,EAAwB,uCAClF,OAAQA,EAAO7F,MACX,KAAKT,EAASU,SACV,OAAO,2BACAoC,GADP,IAEI3C,MAAM,GAAD,mBAAM2C,EAAM3C,OAAZ,CAAmB,CAACC,GAAIC,eAAMC,KAAMgG,EAAO3F,QAAQL,KAAMC,QAAQ,OAG9E,KAAKP,EAASc,YACV,OAAO,2BACAgC,GADP,IAEI3C,MAAM,YAAK2C,EAAM3C,MAAM8C,QAAO,SAACsD,GAAD,OAAOA,EAAEnG,KAAOkG,EAAO3F,QAAQE,aAGrE,KAAKb,EAASe,mBACV,OAAO,2BACA+B,GADP,IAEI3C,MAAO2C,EAAM3C,MAAMgF,KAAI,SAAA7E,GACnB,OAAIA,EAAKF,KAAOkG,EAAO3F,QAAQE,OACpB,2BAAIP,GAAX,IAAiBC,OAAQ+F,EAAO3F,QAAQJ,SAErCD,OAInB,KAAKN,EAASY,aACV,OAAO,2BAAIkC,GAAX,IAAkB3C,MAAOmG,EAAO3F,QAAQR,QAE5C,QACI,OAAO2C,MMnEN0D,EAAQC,YAAYL,GCCjCM,IAASC,OAAO,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACR,cAAC,EAAD,MAEJI,SAASC,eAAe,SAI5BlB,M","file":"static/js/main.1460a51b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Task_main__21tQX\",\"inputBlock\":\"Task_inputBlock__I2QHl\",\"btnAdd\":\"Task_btnAdd__2K39n\",\"taskStyle\":\"Task_taskStyle__vaM3F\",\"itemStyle\":\"Task_itemStyle__32DOX\",\"checkAndDelete\":\"Task_checkAndDelete__1MT14\",\"allBtnStyle\":\"Task_allBtnStyle__mfSZD\",\"btnDelete\":\"Task_btnDelete__2XSxb\",\"input1\":\"Task_input1__JzEz3\",\"errorMessage\":\"Task_errorMessage__blHY4\"};","import {v1} from 'uuid';\r\nimport {InferActionsTypes} from './store';\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    task: string\r\n    isDone: boolean\r\n\r\n}\r\n\r\nexport type TasksType = {\r\n    tasks: TaskType[]\r\n}\r\n\r\nenum TypeKeys {\r\n    ADD_TASK = 'ADD-TASK',\r\n    DELETE_TASK = 'DELETE-TASK',\r\n    CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS',\r\n    UPDATE_STATE = 'UPDATE-STATE'\r\n}\r\n\r\nexport enum FilterKeys {\r\n    All = 'all',\r\n    Active = 'active',\r\n    Completed = 'completed'\r\n}\r\n\r\n\r\nconst initialState: TasksType = {\r\n    tasks:\r\n        [\r\n            {id: v1(), task: 'Я узнал, что у меня', isDone: false},\r\n            {id: v1(), task: 'Есть огромная родня:', isDone: true},\r\n            {id: v1(), task: 'И тропинка, и лесок,', isDone: false},\r\n            {id: v1(), task: 'В поле — каждый колосок,', isDone: true},\r\n            {id: v1(), task: 'Звери, птицы, и жуки,', isDone: false},\r\n            {id: v1(), task: 'Муравьи и мотыльки…', isDone: true},\r\n            {id: v1(), task: 'Всё, что рядышком со мною, —', isDone: false},\r\n            {id: v1(), task: 'Это всё моё родное!', isDone: true},\r\n            {id: v1(), task: 'Как же мне в краю родном', isDone: false},\r\n            {id: v1(), task: 'Не заботиться о нём!', isDone: true}\r\n        ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case TypeKeys.ADD_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, {id: v1(), task: action.payload.task, isDone: false}]\r\n            }\r\n        }\r\n        case TypeKeys.DELETE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks.filter((s) => s.id !== action.payload.taskId)]\r\n            }\r\n        }\r\n        case TypeKeys.CHANGE_TASK_STATUS: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(task => {\r\n                    if (task.id === action.payload.taskId) {\r\n                        return {...task, isDone: action.payload.isDone}\r\n                    }\r\n                    return task\r\n                })\r\n            }\r\n        }\r\n        case TypeKeys.UPDATE_STATE: {\r\n            return {...state, tasks: action.payload.tasks}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    addTaskAC: (task: string) => ({type: TypeKeys.ADD_TASK, payload: {task}} as const),\r\n    updateStateAC: (tasks: TaskType[]) => ({type: TypeKeys.UPDATE_STATE, payload: {tasks}} as const),\r\n    deleteTaskAC: (taskId: string) => ({type: TypeKeys.DELETE_TASK, payload: {taskId}} as const),\r\n    changeTaskStatusAC: (taskId: string, isDone: boolean) => ({type: TypeKeys.CHANGE_TASK_STATUS, payload: {taskId, isDone}} as const)\r\n}\r\n\r\n","import React, { ChangeEvent } from 'react';\r\nimport classes from '../Task/Task.module.css';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { Checkbox, IconButton } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\ntype TaskItemPropsType = {\r\n    id: string\r\n    task: string\r\n    isDone: boolean\r\n    idx: number\r\n    onClickChangeCheckbox: (id: string, e: ChangeEvent<HTMLInputElement>) => void\r\n    onClickDeleteTask: () => void\r\n}\r\n\r\nexport const TaskItem = ({id, task, idx, isDone, onClickChangeCheckbox, onClickDeleteTask}: TaskItemPropsType) => {\r\n    return (\r\n        <div key={id} className={classes.taskStyle}>\r\n            <Draggable key={id} draggableId={id} index={idx}>\r\n                {(provided) => (\r\n                    <div\r\n                        ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} className={classes.itemStyle}>\r\n                        <p>{task}</p>\r\n                        <div className={classes.checkAndDelete}>\r\n                            <Checkbox checked={isDone || false}\r\n                                      onChange={(e) => onClickChangeCheckbox(id, e)}\r\n                                      name=\"checkedA\"\r\n                            />\r\n                            <IconButton onClick={onClickDeleteTask}\r\n                                        aria-label=\"delete\"\r\n                                        className={classes.margin}>\r\n                                <DeleteIcon/>\r\n                            </IconButton>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Draggable>\r\n        </div>\r\n    );\r\n};\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TextField } from '@material-ui/core';\r\nimport { actions, FilterKeys, TaskType } from '../../store/tasks-reducer';\r\nimport classes from './Task.module.css';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport Button from '@material-ui/core/Button';\r\nimport { AppRootStateType } from '../../store/store';\r\nimport { TaskItem } from '../TaskItem/TaskItem';\r\n\r\n\r\n\r\ntype TaskFormType = {\r\n    addTask: () => void;\r\n    onChangeHandler: (e: ChangeEvent<HTMLInputElement>) => void;\r\n    title: string;\r\n    error: string\r\n}\r\n\r\nexport function Task(props: TaskFormType) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const tasks = useSelector<AppRootStateType, TaskType[]>(state => state.tasks.tasks);\r\n\r\n    const onClickDeleteTask = (id: string) => {\r\n        dispatch(actions.deleteTaskAC(id))\r\n    }\r\n\r\n    const [filter, setFilter] = useState<FilterKeys>(FilterKeys.All);\r\n\r\n    const FilterTasks = (tasks: TaskType[]): TaskType[] => {\r\n\r\n        if (filter === FilterKeys.Active) {\r\n            return tasks.filter(t => !t.isDone);\r\n        }\r\n        if (filter === FilterKeys.Completed) {\r\n            return tasks.filter(t => t.isDone);\r\n        }\r\n        return tasks\r\n    }\r\n\r\n    const onClickChangeCheckboxHandler = (id: string, e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        dispatch(actions.changeTaskStatusAC(id, newIsDoneValue))\r\n    }\r\n\r\n    const changeFilterHandler = (filter: FilterKeys) => {\r\n        setFilter(filter)\r\n    }\r\n\r\n    function handleOnDragEnd(result: any) {\r\n        if (!result.destination) return;\r\n        const items = [...tasks];\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n        dispatch(actions.updateStateAC(items))\r\n    }\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <div className={classes.inputBlock}>\r\n                <TextField id=\"outlined-basic\" label=\"Task\" variant=\"outlined\"\r\n                           value={props.title}\r\n                           onChange={props.onChangeHandler}\r\n                           className={classes.input1}\r\n                />\r\n                <Button size=\"small\" variant=\"outlined\" className={classes.btnAdd} onClick={props.addTask}>+</Button>\r\n                {props.error && <div className={classes.errorMessage}>{props.error}</div>}\r\n            </div>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId={'droppable'}>\r\n                    {(provided) => (\r\n                        <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                            <div>\r\n                                {\r\n                                    FilterTasks(tasks).map((t, index) => {\r\n                                            if (t.task) {\r\n                                                return <TaskItem key={t.id}\r\n                                                                 id={t.id}\r\n                                                                 idx={index}\r\n                                                                 isDone={t.isDone}\r\n                                                                 task={t.task}\r\n                                                                 onClickDeleteTask={() => onClickDeleteTask(t.id)}\r\n                                                                 onClickChangeCheckbox={onClickChangeCheckboxHandler}\r\n                                                />\r\n                                            }\r\n                                        }\r\n                                    )\r\n                                }\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            <div className={classes.allBtnStyle}>\r\n                <Button onClick={() => changeFilterHandler(FilterKeys.All)}>All</Button>\r\n                <Button onClick={() => changeFilterHandler(FilterKeys.Active)}>Active</Button>\r\n                <Button onClick={() => changeFilterHandler(FilterKeys.Completed)}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { actions } from '../store/tasks-reducer';\r\nimport { Task } from './Task/Task';\r\n\r\n\r\nexport function TasksForm() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [title, setTitle] = useState<string>('');\r\n\r\n    const [error, setError] = useState<string>('');\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            dispatch(actions.addTaskAC(title.trim()))\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError('')\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <Task\r\n            addTask={addTask}\r\n            onChangeHandler={onChangeHandler}\r\n            title={title}\r\n            error={error}\r\n        />\r\n    )\r\n}","import React from \"react\";\r\nimport { TasksForm } from \"./component/TasksForm\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <TasksForm/>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers, createStore } from 'redux';\r\nimport { tasksReducer } from \"./tasks-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\ntype PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\r\n\r\nexport type InferActionsTypes<T extends {[key: string]: (...args: any[])=>any}> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store/store';\r\n\r\n\r\nReactDOM.render(<Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}