{"version":3,"sources":["store/tasks-reducer.tsx","component/Task.tsx","component/TasksForm.tsx","component/Box.tsx","component/TaskFormContainer.tsx","App.tsx","reportWebVitals.ts","store/store.tsx","index.tsx","component/Task.module.css","component/Box.module.css"],"names":["TypeKeys","FilterKeys","initialState","tasks","id","v1","task","isDone","actions","type","ADD_TASK","payload","taskId","DELETE_TASK","CHANGE_TASK_STATUS","Task","props","useDrag","collect","monitor","isDragging","dragRef","useState","FilterTasks","characters","setCharacters","useEffect","ref","className","classes","mainForMovable","main","inputBlock","TextField","label","variant","value","title","onChange","onChangeHandler","input1","Button","size","btnAdd","onClick","addTask","error","errorMessage","onDragEnd","result","destination","items","splice","source","index","reorderedItem","droppableId","provided","droppableProps","innerRef","map","t","taskStyle","draggableId","draggableProps","dragHandleProps","Checkbox","checked","e","onChangeCheckboxHandler","onClickChangeCheckboxHandler","name","IconButton","deleteTask","aria-label","margin","placeholder","allBtnStyle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","TasksForm","dispatch","useDispatch","setTitle","setError","All","filter","setFilter","tasksForTodolist","useSelector","state","Active","Completed","trim","deleteTaskFromRedux","currentTarget","newIsDoneValue","Box","card","moveCard","useDrop","accept","drop","isOver","dropRef","box","style","backgroundColor","TaskFormContainer","setIndex","i","containerStyle","v","bind","App","DndProvider","backend","HTML5Backend","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","s","stateCopy","find","store","createStore","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.0899e770.chunk.js","sourcesContent":["import { v1 } from \"uuid\";\r\nimport { InferActionsTypes } from \"./store\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    task: string\r\n    isDone: boolean\r\n\r\n}\r\n\r\nexport type TasksType = {\r\n    tasks: TaskType[]\r\n}\r\n\r\nenum TypeKeys {\r\n    ADD_TASK = \"ADD-TASK\",\r\n    DELETE_TASK = \"DELETE-TASK\",\r\n    CHANGE_TASK_STATUS = \"CHANGE-TASK-STATUS\"\r\n}\r\n\r\nexport enum FilterKeys {\r\n    All = \"all\",\r\n    Active = \"active\",\r\n    Completed = \"completed\"\r\n}\r\n\r\n\r\nconst initialState: TasksType = {\r\n    tasks:\r\n        [\r\n            {id: v1(), task: \"\", isDone: false}\r\n        ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case TypeKeys.ADD_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, {id: v1(), task: action.payload.task, isDone: false}]\r\n            }\r\n        }\r\n        case TypeKeys.DELETE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks.filter((s) => s.id !== action.payload.taskId)]\r\n            }\r\n        }\r\n        case TypeKeys.CHANGE_TASK_STATUS: {\r\n            const stateCopy = {...state};\r\n            const task = stateCopy.tasks.find(t => t.id === action.payload.taskId);\r\n            if (task) {\r\n                task.isDone = action.payload.isDone;\r\n            }\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    addTaskAC: (task: string) => ({type: TypeKeys.ADD_TASK, payload: {task}} as const),\r\n    deleteTaskAC: (taskId: string) => ({type: TypeKeys.DELETE_TASK, payload: {taskId}} as const),\r\n    changeTaskStatusAC: (taskId: string, isDone: boolean) => ({type: TypeKeys.CHANGE_TASK_STATUS, payload: {taskId, isDone}} as const)\r\n}\r\n\r\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { TaskType } from \"../store/tasks-reducer\";\r\nimport classes from \"./Task.module.css\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Checkbox, IconButton, TextField } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\ntype TaskFormType = {\r\n    onAllClickHandler: () => void;\r\n    onActiveClickHandler: () => void;\r\n    onCompletedClickHandler: () => void;\r\n    FilterTasks: () => Array<TaskType>;\r\n    addTask: () => void;\r\n    deleteTask: (id: string) => void;\r\n    onChangeHandler: (e: ChangeEvent<HTMLInputElement>) => void;\r\n    onChangeCheckboxHandler: (id: string, e: ChangeEvent<HTMLInputElement>) => void;\r\n    title: string;\r\n    error: string\r\n}\r\n\r\n\r\nexport function Task(props: TaskFormType) {\r\n\r\n    const [{isDragging}, dragRef] = useDrag({\r\n        type: \"card\",\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    const onClickDeleteTask = (id: string) => {\r\n        props.deleteTask(id)\r\n    }\r\n\r\n    const onClickChangeCheckboxHandler = (id: string, e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeCheckboxHandler(id, e)\r\n    }\r\n\r\n    const [characters, setCharacters] = useState<TaskType[]>(props.FilterTasks());\r\n\r\n    useEffect(() => {\r\n            setCharacters(props.FilterTasks())\r\n        }, [props]\r\n    )\r\n\r\n    function handleOnDragEnd(result: any) {\r\n        if (!result.destination) return;\r\n        const items = [...characters];\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n        setCharacters(items);\r\n    }\r\n\r\n    return (\r\n        <div ref={dragRef} className={isDragging ? classes.mainForMovable : classes.main}>\r\n            <div className={classes.inputBlock}>\r\n                <TextField id=\"outlined-basic\" label=\"Task\" variant=\"outlined\"\r\n                           value={props.title}\r\n                           onChange={props.onChangeHandler}\r\n                           className={classes.input1}\r\n                />\r\n                <Button size=\"small\" variant=\"outlined\" className={classes.btnAdd} onClick={props.addTask}>+</Button>\r\n                {props.error && <div className={classes.errorMessage}>{props.error}</div>}\r\n            </div>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId={\"droppable\"}>\r\n                    {(provided) => (\r\n                        <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                            <div>\r\n                                {\r\n                                    characters.map((t, index) => {\r\n                                            if (t.task) {\r\n                                                return <div key={t.id} className={classes.taskStyle}>\r\n                                                    <Draggable key={t.id} draggableId={t.id} index={index}>\r\n                                                        {(provided) => (\r\n                                                            <div\r\n                                                                ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                                                <p>{t.task}\r\n                                                                    <Checkbox checked={t.isDone || false}\r\n                                                                              onChange={(e) => onClickChangeCheckboxHandler(t.id, e)}\r\n                                                                              name=\"checkedA\"/>\r\n                                                                    <IconButton onClick={() => onClickDeleteTask(t.id)}\r\n                                                                                aria-label=\"delete\"\r\n                                                                                className={classes.margin}>\r\n                                                                        <DeleteIcon/>\r\n                                                                    </IconButton>\r\n                                                                </p>\r\n                                                            </div>\r\n                                                        )}\r\n                                                    </Draggable>\r\n                                                </div>\r\n                                            }\r\n                                        }\r\n                                    )\r\n                                }\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            <div className={classes.allBtnStyle}>\r\n                <Button onClick={props.onAllClickHandler}>All</Button>\r\n                <Button onClick={props.onActiveClickHandler}>Active</Button>\r\n                <Button onClick={props.onCompletedClickHandler}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"../store/store\";\r\nimport { actions, FilterKeys, TasksType, TaskType } from \"../store/tasks-reducer\";\r\nimport { Task } from \"./Task\";\r\n\r\n\r\nexport function TasksForm() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const deleteTaskFromRedux = (id: string) => {\r\n        dispatch(actions.deleteTaskAC(id))\r\n    }\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n\r\n    const [error, setError] = useState<string>(\"\")\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            dispatch(actions.addTaskAC(title.trim()))\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const deleteTask = (id: string) => {\r\n        deleteTaskFromRedux(id)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(\"\")\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangeCheckboxHandler = (id: string, e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        dispatch(actions.changeTaskStatusAC(id, newIsDoneValue))\r\n    }\r\n\r\n    let [filter, setFilter] = useState<FilterKeys>(FilterKeys.All);\r\n\r\n    let tasksForTodolist = useSelector<AppRootStateType, TasksType>(state => state.tasks);\r\n\r\n    function FilterTasks(): TaskType[] {\r\n\r\n        if (filter === FilterKeys.Active) {\r\n            return tasksForTodolist.tasks.filter(t => !t.isDone);\r\n        }\r\n        if (filter === FilterKeys.Completed) {\r\n            return tasksForTodolist.tasks.filter(t => t.isDone);\r\n        }\r\n        return tasksForTodolist.tasks\r\n    }\r\n\r\n\r\n    const onAllClickHandler = () => {\r\n        setFilter(FilterKeys.All)\r\n    }\r\n\r\n    const onActiveClickHandler = () => {\r\n        setFilter(FilterKeys.Active)\r\n    }\r\n\r\n    const onCompletedClickHandler = () => {\r\n        setFilter(FilterKeys.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n                <Task onAllClickHandler={onAllClickHandler}\r\n                      onActiveClickHandler={onActiveClickHandler}\r\n                      onCompletedClickHandler={onCompletedClickHandler}\r\n                      FilterTasks={FilterTasks}\r\n                      addTask={addTask}\r\n                      deleteTask={deleteTask}\r\n                      onChangeHandler={onChangeHandler}\r\n                      onChangeCheckboxHandler={onChangeCheckboxHandler}\r\n                      title={title}\r\n                      error={error}\r\n                />\r\n        </div>\r\n    )\r\n}","import { useDrop } from \"react-dnd\";\r\nimport { TasksForm } from \"./TasksForm\";\r\nimport classes from \"./Box.module.css\";\r\n\r\nexport function Box({card, moveCard}: any) {\r\n    const [{isOver}, dropRef] = useDrop({\r\n        accept: \"card\",\r\n        drop: () => moveCard(),\r\n        collect: (monitor) => ({\r\n            isOver: !monitor.isOver(),\r\n        }),\r\n    });\r\n\r\n    return (\r\n        <div\r\n            className={classes.box}\r\n            ref={dropRef}\r\n            style={{\r\n                backgroundColor: isOver ? \"white\" : \"#c5dcc5\"\r\n            }}\r\n        >\r\n            {card ? <TasksForm/> : \"\"}\r\n        </div>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { Box } from \"./Box\";\r\nimport classes from \"./Box.module.css\";\r\n\r\n\r\nconst value = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\r\n\r\nexport function TaskFormContainer() {\r\n\r\n    const [index, setIndex] = useState(value[2]);\r\n\r\n    function moveCard(i: number) {\r\n        setIndex(i)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.containerStyle}>\r\n            {value.map(v => {\r\n                return <Box card={index === v} moveCard={moveCard.bind(null, v)}/>\r\n            })}\r\n        </div>\r\n    );\r\n}","import React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TaskFormContainer } from \"./component/TaskFormContainer\";\n\n\nfunction App() {\n    return (\n        <div>\n            <DndProvider backend={HTML5Backend}>\n                <TaskFormContainer/>\n            </DndProvider>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, createStore } from 'redux';\r\nimport { tasksReducer } from \"./tasks-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\ntype PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\r\n\r\nexport type InferActionsTypes<T extends {[key: string]: (...args: any[])=>any}> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\n\nReactDOM.render(<Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Task_main__1ndkc\",\"mainForMovable\":\"Task_mainForMovable__2Y2P2\",\"inputBlock\":\"Task_inputBlock__2xsbx\",\"allBtnStyle\":\"Task_allBtnStyle__2JpzL\",\"btnDelete\":\"Task_btnDelete__3kqTA\",\"btnAdd\":\"Task_btnAdd__3mS0G\",\"input1\":\"Task_input1__2B_zx\",\"taskStyle\":\"Task_taskStyle__1O4m_\",\"errorMessage\":\"Task_errorMessage__3exjc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerStyle\":\"Box_containerStyle__2633U\",\"box\":\"Box_box__2mKmN\"};"],"sourceRoot":""}