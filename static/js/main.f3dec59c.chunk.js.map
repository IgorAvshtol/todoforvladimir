{"version":3,"sources":["component/Task/Task.module.css","store/tasks-reducer.tsx","component/TaskItem/TaskItem.tsx","component/AddTask/AddTask.tsx","component/UseInput/UseInput.tsx","component/ButtonFilter/ButtonFilterTasks.tsx","component/Task/Task.tsx","App.tsx","reportWebVitals.ts","store/store.tsx","index.tsx"],"names":["module","exports","TypeKeys","FilterKeys","initialState","tasks","id","v1","task","isDone","actions","type","ADD_TASK","payload","UPDATE_STATE","taskId","DELETE_TASK","CHANGE_TASK_STATUS","TaskItem","idx","onClickChangeCheckbox","onClickDeleteTask","number","className","classes","taskStyle","draggableId","index","provided","ref","innerRef","draggableProps","dragHandleProps","itemStyle","checkAndDelete","Checkbox","checked","onChange","e","name","IconButton","onClick","aria-label","margin","AddTask","dispatch","useDispatch","useState","value","setValue","error","setError","target","onBlur","useInput","inputBlock","TextField","label","variant","input1","Button","size","btnAdd","trim","errorMessage","ButtonFilter","props","filter","filterValue","setFilter","Task","useSelector","state","All","FilterTasks","Active","t","Completed","onClickChangeCheckboxHandler","newIsDoneValue","currentTarget","main","onDragEnd","result","destination","items","splice","source","reorderedItem","droppableId","droppableProps","map","placeholder","allBtnStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","s","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3dec59c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Task_main__21tQX\",\"inputBlock\":\"Task_inputBlock__I2QHl\",\"btnAdd\":\"Task_btnAdd__2K39n\",\"taskStyle\":\"Task_taskStyle__vaM3F\",\"itemStyle\":\"Task_itemStyle__32DOX\",\"allBtnStyle\":\"Task_allBtnStyle__mfSZD\",\"btnDelete\":\"Task_btnDelete__2XSxb\",\"input1\":\"Task_input1__JzEz3\",\"errorMessage\":\"Task_errorMessage__blHY4\"};","import { v1 } from 'uuid';\r\nimport { InferActionsTypes } from './store';\r\n\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  task: string\r\n  isDone: boolean\r\n}\r\n\r\nexport type TasksType = {\r\n  tasks: TaskType[]\r\n}\r\n\r\nenum TypeKeys {\r\n  ADD_TASK = 'ADD-TASK',\r\n  DELETE_TASK = 'DELETE-TASK',\r\n  CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS',\r\n  UPDATE_STATE = 'UPDATE-STATE'\r\n}\r\n\r\nexport enum FilterKeys {\r\n  All = 'all',\r\n  Active = 'active',\r\n  Completed = 'completed'\r\n}\r\n\r\n\r\nconst initialState: TasksType = {\r\n  tasks:\r\n      [\r\n        {id: v1(), task: 'Я узнал, что у меня', isDone: false},\r\n        {id: v1(), task: 'Есть огромная родня:', isDone: true},\r\n        {id: v1(), task: 'И тропинка, и лесок,', isDone: false},\r\n        {id: v1(), task: 'В поле — каждый колосок,', isDone: true},\r\n        {id: v1(), task: 'Звери, птицы, и жуки,', isDone: false},\r\n        {id: v1(), task: 'Муравьи и мотыльки…', isDone: true},\r\n        {id: v1(), task: 'Всё, что рядышком со мною, —', isDone: false},\r\n        {id: v1(), task: 'Это всё моё родное!', isDone: true},\r\n        {id: v1(), task: 'Как же мне в краю родном', isDone: false},\r\n        {id: v1(), task: 'Не заботиться о нём!', isDone: true}\r\n      ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksType = initialState, action: ActionsType) => {\r\n  switch (action.type) {\r\n    case TypeKeys.ADD_TASK: {\r\n      return {\r\n        ...state,\r\n        tasks: [...state.tasks, {id: v1(), task: action.payload.task, isDone: false}]\r\n      }\r\n    }\r\n    case TypeKeys.DELETE_TASK: {\r\n      return {\r\n        ...state,\r\n        tasks: [...state.tasks.filter((s) => s.id !== action.payload.taskId)]\r\n      }\r\n    }\r\n    case TypeKeys.CHANGE_TASK_STATUS: {\r\n      return {\r\n        ...state,\r\n        tasks: state.tasks.map(task => {\r\n          if (task.id === action.payload.taskId) {\r\n            return {...task, isDone: action.payload.isDone}\r\n          }\r\n          return task\r\n        })\r\n      }\r\n    }\r\n    case TypeKeys.UPDATE_STATE: {\r\n      return {...state, tasks: action.payload.tasks}\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n  addTaskAC: (task: string) => ({type: TypeKeys.ADD_TASK, payload: {task}} as const),\r\n  updateStateAC: (tasks: TaskType[]) => ({type: TypeKeys.UPDATE_STATE, payload: {tasks}} as const),\r\n  deleteTaskAC: (taskId: string) => ({type: TypeKeys.DELETE_TASK, payload: {taskId}} as const),\r\n  changeTaskStatusAC: (taskId: string, isDone: boolean) => ({\r\n    type: TypeKeys.CHANGE_TASK_STATUS,\r\n    payload: {taskId, isDone}\r\n  } as const)\r\n}\r\n\r\n","import React, { ChangeEvent } from 'react';\r\n\r\nimport classes from '../Task/Task.module.css';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { Checkbox, IconButton } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\ntype TaskItemPropsType = {\r\n  id: string\r\n  task: string\r\n  isDone: boolean\r\n  idx: number\r\n  number: number\r\n  onClickChangeCheckbox: (id: string, e: ChangeEvent<HTMLInputElement>) => void\r\n  onClickDeleteTask: () => void\r\n}\r\n\r\nexport const TaskItem = ({id, task, idx, isDone, onClickChangeCheckbox, onClickDeleteTask, number}: TaskItemPropsType) => {\r\n  return (\r\n      <div key={id} className={classes.taskStyle}>\r\n        <Draggable key={id} draggableId={id} index={idx}>\r\n          {(provided) => (\r\n              <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}\r\n                   className={classes.itemStyle}>\r\n                <p>{number + 1}</p>\r\n                <p>{task}</p>\r\n                <div className={classes.checkAndDelete}>\r\n                  <Checkbox\r\n                      checked={isDone || false}\r\n                      onChange={(e) => onClickChangeCheckbox(id, e)}\r\n                      name=\"checkedA\"\r\n                  />\r\n                  <IconButton onClick={onClickDeleteTask} aria-label=\"delete\" className={classes.margin}>\r\n                    <DeleteIcon/>\r\n                  </IconButton>\r\n                </div>\r\n              </div>\r\n          )}\r\n        </Draggable>\r\n      </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport classes from '../Task/Task.module.css';\r\nimport { TextField } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport { actions } from '../../store/tasks-reducer';\r\nimport { useInput } from '../UseInput/UseInput';\r\n\r\n\r\nexport function AddTask() {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const {value, setValue, error, onChange, onBlur} = useInput()\r\n\r\n  const addTask = () => {\r\n    dispatch(actions.addTaskAC(value.trim()))\r\n    setValue(\"\")\r\n  }\r\n\r\n  return (\r\n      <div className={classes.inputBlock}>\r\n        <TextField\r\n            id=\"outlined-basic\" label=\"Task\" variant=\"outlined\"\r\n            value={value}\r\n            onChange={onChange}\r\n            onBlur={onBlur}\r\n            className={classes.input1}\r\n        />\r\n        <Button size=\"small\" variant=\"outlined\" className={classes.btnAdd} onClick={addTask}>+</Button>\r\n        {error && <div className={classes.errorMessage}>{error}</div>}\r\n      </div>\r\n  )\r\n}","import { ChangeEvent, useState } from 'react';\r\n\r\nexport const useInput = () => {\r\n\r\n  const [value, setValue] = useState<string>(\"\")\r\n  const [error, setError] = useState<string>(\"\")\r\n\r\n  return {\r\n    value,\r\n    setValue,\r\n    error,\r\n    onChange: (e: ChangeEvent<HTMLInputElement>): void => {\r\n        setValue(e.target.value)\r\n        setError(\"\")\r\n    },\r\n    onBlur: (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\r\n      if (!e.target.value) setError(\"Required field\")\r\n      else setError(\"\")\r\n    }\r\n  }\r\n}\r\n","import { FilterKeys } from '../../store/tasks-reducer';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\ntype ButtonFilterType = {\r\n  setFilter: (filter: FilterKeys) => void\r\n  filterValue: FilterKeys\r\n}\r\n\r\nexport function ButtonFilter(props: ButtonFilterType) {\r\n\r\n  const changeFilterHandler = (filter: FilterKeys) => {\r\n    props.setFilter(filter)\r\n  }\r\n\r\n  return <div>\r\n    <Button onClick={() => changeFilterHandler(props.filterValue)}>{props.filterValue}</Button>\r\n  </div>\r\n}","import React, { ChangeEvent, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\nimport { actions, FilterKeys, TaskType } from '../../store/tasks-reducer';\r\nimport classes from './Task.module.css';\r\nimport { AppRootStateType } from '../../store/store';\r\nimport { TaskItem } from '../TaskItem/TaskItem';\r\nimport { AddTask } from '../AddTask/AddTask';\r\nimport { ButtonFilter } from '../ButtonFilter/ButtonFilterTasks';\r\n\r\n\r\nexport function Task() {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const tasks = useSelector<AppRootStateType, TaskType[]>(state => state.tasks.tasks);\r\n\r\n  const onClickDeleteTask = (id: string) => {\r\n    dispatch(actions.deleteTaskAC(id))\r\n  }\r\n\r\n  const [filter, setFilter] = useState<FilterKeys>(FilterKeys.All);\r\n\r\n  const FilterTasks = (tasks: TaskType[]): TaskType[] => {\r\n\r\n    if (filter === FilterKeys.Active) {\r\n      return tasks.filter(t => !t.isDone);\r\n    }\r\n    if (filter === FilterKeys.Completed) {\r\n      return tasks.filter(t => t.isDone);\r\n    }\r\n    return tasks\r\n  }\r\n\r\n  const onClickChangeCheckboxHandler = (id: string, e: ChangeEvent<HTMLInputElement>) => {\r\n    const newIsDoneValue = e.currentTarget.checked\r\n    dispatch(actions.changeTaskStatusAC(id, newIsDoneValue))\r\n  }\r\n\r\n  function handleOnDragEnd(result: any) {\r\n    if (!result.destination) return;\r\n    const items = [...tasks];\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n    dispatch(actions.updateStateAC(items))\r\n  }\r\n\r\n  return (\r\n      <div className={classes.main}>\r\n        <AddTask/>\r\n        <DragDropContext onDragEnd={handleOnDragEnd}>\r\n          <Droppable droppableId={'droppable'}>\r\n            {(provided) => (\r\n                <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                  <div>\r\n                    {\r\n                      FilterTasks(tasks).map((t, index) => {\r\n                            if (t.task) {\r\n                              return <TaskItem\r\n                                  key={t.id}\r\n                                  id={t.id}\r\n                                  idx={index}\r\n                                  number={index}\r\n                                  isDone={t.isDone}\r\n                                  task={t.task}\r\n                                  onClickDeleteTask={() => onClickDeleteTask(t.id)}\r\n                                  onClickChangeCheckbox={onClickChangeCheckboxHandler}\r\n                              />\r\n                            }\r\n                          }\r\n                      )\r\n                    }\r\n                    {provided.placeholder}\r\n                  </div>\r\n                </div>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n        <div className={classes.allBtnStyle}>\r\n        <ButtonFilter setFilter={setFilter} filterValue={FilterKeys.All}/>\r\n        <ButtonFilter setFilter={setFilter} filterValue={FilterKeys.Active}/>\r\n        <ButtonFilter setFilter={setFilter} filterValue={FilterKeys.Completed}/>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { Task } from './component/Task/Task';\r\n\r\nfunction App() {\r\n  return (\r\n      <Task/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers, createStore } from 'redux';\r\nimport { tasksReducer } from \"./tasks-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\ntype PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\r\n\r\nexport type InferActionsTypes<T extends {[key: string]: (...args: any[])=>any}> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store/store';\r\n\r\n\r\nReactDOM.render(<Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}