{"version":3,"sources":["component/Tasks.module.css","store/Tasks-reducer.tsx","component/Tasks.tsx","App.tsx","reportWebVitals.ts","store/store.tsx","index.tsx"],"names":["module","exports","initialState","tasks","id","v1","task","isDone","Tasks","dispatch","useDispatch","useState","title","setTitle","error","setError","deleteTask","type","taskId","deleteTaskFromRedux","filter","setFilter","tasksForTodolist","useSelector","state","className","classes","main","name","value","onChange","e","currentTarget","input1","btnAdd","onClick","trim","errorMessage","t","map","taskStyle","checked","newIsDoneValue","onChangeCheckboxHandler","btnDelete","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","s","stateCopy","console","log","find","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54829153.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Tasks_main__329ff\",\"btnDelete\":\"Tasks_btnDelete__MzHk_\",\"btnAdd\":\"Tasks_btnAdd__csqMv\",\"input1\":\"Tasks_input1__3KJn8\",\"taskStyle\":\"Tasks_taskStyle__rgIQG\",\"errorMessage\":\"Tasks_errorMessage__14que\"};","import {v1} from \"uuid\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    task: string\r\n    isDone: boolean\r\n\r\n}\r\n\r\nexport type TasksType = {\r\n    tasks: Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nconst initialState: TasksType = {\r\n    tasks:\r\n        [\r\n            {id: v1(), task: \"\", isDone: false}\r\n        ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, {id: v1(), task: action.task}]\r\n            }\r\n        }\r\n        case 'DELETE-TASK': {\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks.filter((s) => s.id !== action.taskId)]\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            const stateCopy = {...state};\r\n            let tasks = stateCopy;\r\n            console.log(\"first\",tasks)\r\n            let task = tasks.tasks.find(t => t.id === action.taskId);\r\n            console.log(\"2\",task)\r\n            if (task) {\r\n                task.isDone = action.isDone;\r\n\r\n            }\r\n            console.log(\"3\",stateCopy)\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\ntype ActionsType = AddTaskActionType | DeleteTaskActionType | ChangeTaskStatusActionType | FilterTasksActionType\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    task: string\r\n}\r\n\r\nexport type DeleteTaskActionType = {\r\n    type: 'DELETE-TASK'\r\n    taskId: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterTasksActionType = {\r\n    type: 'FILTER-TASKS'\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const addTaskAC = (task: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\n\r\nexport const deleteTaskAC = (taskId: string): DeleteTaskActionType => {\r\n    return {type: 'DELETE-TASK', taskId}\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean) => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone}\r\n\r\n}\r\n\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType) => {\r\n    return {type: 'FILTER-TASKS', filter: filter}\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../store/store\";\r\nimport {\r\n    addTaskAC,\r\n    changeTaskStatusAC,\r\n    deleteTaskAC,\r\n    FilterValuesType,\r\n    TasksType,\r\n    TaskType\r\n} from \"../store/Tasks-reducer\";\r\nimport \"./Tasks.module.css\";\r\nimport classes from \"./Tasks.module.css\";\r\n\r\n\r\nexport function Tasks() {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const deleteTaskFromRedux = (id: string) => {\r\n        dispatch(deleteTaskAC(id))\r\n    }\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    let [error, setError] = useState<string>(\"\")\r\n\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            dispatch(addTaskAC(title.trim()))\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n\r\n    const deleteTask = (id: string) => {\r\n        deleteTaskFromRedux(id)\r\n    }\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(\"\")\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangeCheckboxHandler = (e: ChangeEvent<HTMLInputElement>, id: string) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        dispatch(changeTaskStatusAC(id, newIsDoneValue))\r\n    }\r\n\r\n\r\n    let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n\r\n    let tasksForTodolist = useSelector<AppRootStateType, TasksType>(state => state.tasks);\r\n\r\n    function FilterTasks(): Array<TaskType> {\r\n\r\n        if (filter === \"active\") {\r\n            return tasksForTodolist.tasks.filter(t => !t.isDone);\r\n        }\r\n        if (filter === \"completed\") {\r\n            return tasksForTodolist.tasks.filter(t => t.isDone);\r\n        }\r\n        return tasksForTodolist.tasks\r\n    }\r\n\r\n\r\n    const onAllClickHandler = () => {\r\n        setFilter(\"all\")\r\n    }\r\n\r\n    const onActiveClickHandler = () => {\r\n        setFilter(\"active\")\r\n\r\n    }\r\n\r\n    const onCompletedClickHandler = () => {\r\n        setFilter(\"completed\")\r\n    }\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n\r\n            <b>Tasks:</b>\r\n            <div>\r\n                <input name={\"Tasks\"}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       className={classes.input1}\r\n                />\r\n                <button className={classes.btnAdd} onClick={addTask}>+</button>\r\n                {error && <div className={classes.errorMessage}>{error}</div>}\r\n            </div>\r\n            <div>\r\n\r\n\r\n                {\r\n                    FilterTasks().map((t) => {\r\n                            if (t.task) {\r\n                                return <div key={t.id} className={classes.taskStyle}>\r\n                                    <p>{t.task}\r\n                                        <input type={\"checkbox\"} checked={t.isDone || false} onChange={(e) => onChangeCheckboxHandler(e, t.id)}\r\n                                               />\r\n                                        <button className={classes.btnDelete} onClick={() => deleteTask(t.id)}>-\r\n                                        </button>\r\n                                    </p>\r\n                                </div>\r\n                            }\r\n                        }\r\n                    )\r\n                }\r\n                <div>\r\n                    <button onClick={onAllClickHandler}>All</button>\r\n                    <button onClick={onActiveClickHandler}>Active</button>\r\n                    <button onClick={onCompletedClickHandler}>Completed</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {Tasks} from './component/Tasks';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Tasks/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from \"./Tasks-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\n\nReactDOM.render(<Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}